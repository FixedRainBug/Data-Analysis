num_points = 300
a0=np.array([0,0])
b0=0
lr_a=0.01
lr_b=0.1
mean_1 = [4, 5]
cov_1 = [[1, 0], [0, 1]]
x_1 = np.random.multivariate_normal(mean_1, cov_1, num_points)
mean_2 = [1, 2]
cov_2 = [[2, 0], [0, 2]]
x_2 = np.random.multivariate_normal(mean_2, cov_2, num_points)

plt.scatter(x_1[:, 0], x_1[:, 1], marker = '^', color='orange')
plt.scatter(x_2[:, 0], x_2[:, 1], marker = 'o', color='brown')


def sigmoid(value):
    return 1 / (1 + np.exp(-value))

def grad(x, y, iters, lr_a, lr_b):
    a = a0
    b = b0
    for i in range(iters):
        f = sigmoid(x.dot(a) + b)
        da = np.dot(x.T, (f - y))/x.shape[0]
        db = (f - y).mean()
        a = a - lr_a * da
        b = b - lr_b * db
    return a, b
#prediction func
def predict(x, a, b):
    predict = np.zeros(x.shape[0])
    f = sigmoid(x.dot(a) + b)
    for i in range(x.shape[0]):
        if(f[i] >= 0.5):
            predict[i] = 1
    return predict


iters = 1000

x = np.concatenate([x_1,x_2])
y = np.hstack((np.array([0] * num_points), np.array([1]*num_points)))

a, b = grad(x, y, iters,  lr_a, lr_b)
res = predict(x,a,b)
print("Accuracy: ", 1 - abs(y-res).mean())

plt.figure(figsize=(15,11))
plt.plot(x[:,0][res==0], x[:,1][res==0], 'r.')
plt.plot(x[:,0][res==1], x[:,1][res==1], 'b.')
plt.xlabel('X')
plt.ylabel('Y')
plt.grid()
plt.show()
